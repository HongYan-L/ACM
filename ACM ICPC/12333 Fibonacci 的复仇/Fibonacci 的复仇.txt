#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5;
//TrieÊ÷
struct Trie
{
    int id;
    Trie *Next[10];
    Trie()
    {
        id = -1;
        for (int i = 0; i < 10; i++) Next[i] = NULL;
    }
};
 
void Insert(Trie* root, string s, int id)
{
    Trie* temp = root;
    for (int i = 0; i < s.size(); i++)
    {
        int index = s[i] - '0';
        if (temp->Next[index] == NULL)
        {
            temp->Next[index] = new Trie;
            temp->Next[index]->id = id;
        }
        temp = temp->Next[index];
    }
}
 
int Query(Trie* root, string s)
{
    Trie *temp = root;
    for (int i = 0; i < s.size(); i++)
    {
        int index = s[i] - '0';
        if (temp->Next[index] == NULL) return -1;
        temp = temp->Next[index];
    }
    return temp->id;
}
 
string add(string a, string b)
{
    int i = a.size()-1, j = b.size()-1, g = 0;
    string ans;
    while (i >= 0 || j >= 0 || g)
    {
        int x = g;
        if (i >= 0) x += (a[i] - '0');
        if (j >= 0) x += (b[j] - '0');
        g = x / 10;
        ans += (x%10 + '0');
        i--; j--;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
int main()
{
    Trie* root = new Trie;
    string a = "1", b = "1";
    Insert(root, "1", 0);
    Insert(root, "1", 1);
    for (int i = 2; i < MAXN; i++)
    {
        string sum = add(a, b);
        a = b; b = sum;
        if (sum.size() > 50) sum = sum.substr(0, 50);
        Insert(root, sum, i);
    }
    int T, CASE = 1; scanf("%d", &T);
    while (T--)
    {
        string str; cin >> str;
        int ans = Query(root, str);
        printf("Case #%d: %d\n", CASE++, ans);
    }
    return 0;
}