#include<bits/stdc++.h>
using namespace std;

string raw[1510][85];
set<string> word[1510][1000]; //代表每一段每一行单词的集合 
set<string> words[1510];//每一段单词的集合 
int n,len[1510]; //len表示每一段的行数 

void AND(string a, string b)
{
	int i, j, f3 = 0; //f3的作用是控制输出格式 
	for(i = 0; i < n; i++)
	{
		if(words[i].count(a) && words[i].count(b))
		{
			if(f3 == 1)
			{
				printf("----------\n");
			}
			for(j = 0; j < len[i]; j++)
			{
				if(word[i][j].count(a) || word[i][j].count(b))
				{
					cout << raw[i][j] << endl;
					f3 = 1;
				}
			}
		}
	}
	if(f3 == 0)
	{
		printf("Sorry, I found nothing.\n");
	}
	printf("==========\n");
}

void OR(string a,string b)
{
	int i, j, f3 = 0;
	for(i = 0; i < n; i++)
	{
		if(words[i].count(a) || words[i].count(b))
		{
			if(f3 == 1)
			{
				printf("----------\n");
				f3 = 0;
			}
			for(j = 0; j < len[i]; j++)
			{
				if(word[i][j].count(a) || word[i][j].count(b))
				{
					cout << raw[i][j] << endl;
					f3 = 1;
				}
			}
		}
	}
	if(f3 == 0)
	{
		printf("Sorry, I found nothing.\n");
	}
	printf("==========\n");
}

void NOT(string a)
{
	int i, j, f3 = 0;
	for(i = 0; i < n; i++)
	{
		if(!words[i].count(a))
		{
			if(f3 == 1)
			{
				printf("----------\n");
			}
			for(j = 0; j < len[i]; j++)
			{
				cout << raw[i][j] << endl;
			}
			f3 = 1;
		}
	}
	if(f3 == 0)
	{
		printf("Sorry, I found nothing.\n");
	}
	printf("==========\n");
}

int main()
{
	string s, w;
	int i, j, m;	
	scanf("%d ", &n);
	memset(len, 0, sizeof(len));
	for(i = 0; i < n; i++)
	{
		j = 0;
		while(getline(cin,s) && s[0] != '*')
		{
			raw[i][j] += s;
			string::iterator it = s.begin();
			for(; it != s.end(); ++it)
				if(isalpha(*it)) *it = tolower(*it);
			else *it = ' '; 
			stringstream ss(s);
			while(ss >> w)
			{
				word[i][j].insert(w);
				words[i].insert(w);
			}
			j++;
		}
		len[i] = j;
	}
	scanf("%d ", &m);
	while(m--)
	{
		string a, b, ww;
		getline(cin, ww);
		for(i = 0; i < ww.length(); i++)
		{
			if(ww[i] == 'A')
			{
				AND(ww.substr(0, ww.find_first_of("A")-1), ww.substr(ww.find_first_of("A")+4));
				break;
			}
			else if(ww[i] == 'R')
			{
				OR(ww.substr(0, ww.find_first_of("R")-2), ww.substr(ww.find_first_of("R")+2));
				break;
			}
			else if(ww[i] == 'T')
			{
				NOT(ww.substr(ww.find_first_of("T")+2));
				break;
			}
		}
		if(i == ww.length())
		{
			int f1 = 0;
			for(i = 0; i < n; i++)
			{
				if(words[i].count(ww))
				{
					if(f1 == 1)
					{
						printf("----------\n");
					}
					for(j = 0; j < len[i]; j++)
					{
						if(word[i][j].count(ww))
						{
							cout << raw[i][j] << endl;
							f1 = 1;
						}
					}
				}	
			}
			if(f1 == 0)
			{
				printf("Sorry, I found nothing.\n");
			}
			printf("==========\n");
		}	
	}
	return 0;
}