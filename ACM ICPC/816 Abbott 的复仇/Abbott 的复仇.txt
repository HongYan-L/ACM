#include<bits/stdc++.h>
using namespace std;

const int N = 11;
int x0, y0, x1, y1, x2, y2;
char dir_start;
struct Node {
	int x;
	int y;
	int dir;
	Node(int x , int y, int dir) {
		this->x = x;
		this->y = y;
		this->dir = dir;
	}
	Node() {}
};
const char* dirs = "NESW";
const char* turns = "FLR";
int dir_id(char c) {return strchr(dirs, c) - dirs;}
int turn_id(char c) {return strchr(turns, c) - turns;}
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

Node walk(const Node& u, int turn) {
	int dir = u.dir;
	if(turn == 1) dir = (dir + 3) % 4;// 逆时针
	if(turn == 2) dir = (dir + 1) % 4;// 顺时针
	return Node(u.x + dx[dir], u.y + dy[dir], dir);
}

int has_edge[N][N][4][3];
int d[N][N][4];// 已经走过的点
Node p[N][N][4];// 父结点

void print_ans(Node u) {
	vector<Node> nodes;
	while(true) {
		nodes.push_back(u);// 终点
		if(d[u.x][u.y][u.dir] == 0)
			break;
		u = p[u.x][u.y][u.dir];
	}
	int sum = 0;
	for(int i = nodes.size() - 1; i >= 0 ; i--) {
		if(sum % 10 == 0)
			cout << " ";
		cout << " ("<<nodes[i].x<<","<<nodes[i].y<<")";
		if(++sum % 10 == 0)
			cout << endl;
	}
	if(nodes.size() % 10 != 0)
		cout << endl;
}

void solve() {
	int dir = dir_id(dir_start);
	Node start(x0, y0, dir);
	d[x0][y0][dir] = 0;
	Node u(x1, y1, dir);
	d[x1][y1][dir] = 1;
	p[x1][y1][dir] = start;
	queue<Node> q;
	q.push(u);
	while(!q.empty()) {
		u = q.front();
		q.pop();
		if(u.x == x2 && u.y == y2) {
			print_ans(u);
			return;
		}
		for(int i = 0; i < 3; i++) {
			if(has_edge[u.x][u.y][u.dir][i]) {
				Node v = walk(u, i);
				if(d[v.x][v.y][v.dir] < 0) {
					d[v.x][v.y][v.dir] = d[u.x][u.y][u.dir] + 1;
					p[v.x][v.y][v.dir] = u;
					q.push(v);
				}
			}
		}
	}
	cout << "  No Solution Possible" <<endl;
}

int main() {
	string maze_name, maze_input_buf, str;
	int x, y;
	stringstream maze_input;
	while(getline(cin, maze_name) && maze_name != "END") {
		cin>>x0>>y0>>dir_start>>x2>>y2;
		if(dir_start == 'N') {x1 = x0 - 1; y1 = y0;}
		else if(dir_start == 'E') {x1 = x0; y1 = y0 + 1;}
		else if(dir_start == 'S') {x1 = x0 + 1; y1 = y0;}
		else if(dir_start == 'W') {x1 = x0; y1 = y0 - 1;}
		memset(p, 0, sizeof(p));
		memset(d, -1, sizeof(d));
		memset(has_edge, 0, sizeof(has_edge));
		getchar();
		while(getline(cin, maze_input_buf) && maze_input_buf != "0") {
			maze_input << maze_input_buf;
			maze_input>>x>>y;
			while(maze_input>>str) {
				if(str[0] != '*') {
					int dir = dir_id(str[0]);
					for(int i = 1; i < str.length(); i++) {
						int turn = turn_id(str[i]);
						has_edge[x][y][dir][turn] = 1;
					}
				}
			}
			maze_input.clear();
		}
		cout << maze_name <<endl;
		solve();
	}
	return 0;
}