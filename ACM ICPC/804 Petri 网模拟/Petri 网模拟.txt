#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
const int maxn = 105;
int NP, token, np[maxn], NF;
struct Petri{
	int in[maxn], out[maxn], ip, op, i[maxn], o[maxn];
}pet[maxn];
int main()
{
	int kase = 0;
	while(scanf("%d", &NP) == 1 && NP)
	{
		memset(pet, 0, sizeof(pet));
		for(int i = 1; i <= NP; i++)
			scanf("%d", &np[i]);
		scanf("%d", &token);
		for(int i = 1; i <= token; i++)
		{
			int k;
			while(scanf("%d", &k) == 1 && k)
			{
				if(k < 0) ++pet[i].in[-k];
				else ++pet[i].out[k];
			}
			for(int j = 1; j <= NP; j++)
			{
				if(pet[i].in[j]) pet[i].i[++pet[i].ip] = j;
				if(pet[i].out[j]) pet[i].o[++pet[i].op] = j;
			}
		}
		scanf("%d", &NF);
		int cnt = 0;
		for(int i = 1; i <= token; i++)
		{
			bool flag = true;
			Petri &k = pet[i];
			for(int j = 1; j <= k.ip; j++)
				if(np[k.i[j]] < k.in[k.i[j]]) {flag = false; break;}
			if(!flag) continue;
			for(int j = 1; j <= k.ip; j++) np[k.i[j]] -= k.in[k.i[j]];
			for(int j = 1; j <= k.op; j++) np[k.o[j]] += k.out[k.o[j]];
			i = 0;
			if(++cnt >= NF) break;
		}
		if(cnt >= NF) printf("Case %d: still live after %d transitions\n", ++kase, NF);
        else printf("Case %d: dead after %d transitions\n", ++kase, cnt);
        printf("Places with tokens:");
        for(int i = 1; i <= NP; i++) if(np[i]) printf(" %d(%d)", i, np[i]);
        printf("\n\n");
	}
	return 0;
}