#include<bits/stdc++.h>
using namespace std;

map<string, string> old_dic, new_dic;
vector<string> old_key, new_key, out[5];
const string pn[5] = {"+", "-", "*"};

void deal(const string& code, string& key, string& value)
{
	int p = code.find(":");
	key = code.substr(0, p);
	value = code.substr(p + 1);
}

void input(int old)
{
	string str, key, value, code;
	getline(cin, str);
	for(int i = 0; i < str.size(); i++)
		if(str[i] == ',' || str[i] == '{' || str[i] == '}')
			str[i] = ' ';
	stringstream ss(str);
	while(ss>>code)
	{
		deal(code, key, value);
		if(old) {old_key.push_back(key); old_dic[key] = value;}
		else {new_key.push_back(key); new_dic[key] = value;}
	}
}

int main()
{
	int n;
	scanf("%d ", &n);
	while(n--)
	{
		old_dic.clear();
		new_dic.clear();
		old_key.clear();
		new_key.clear();
		out[0].clear();
		out[1].clear();
		out[2].clear();
		input(1);
		input(0);
		for(int i = 0; i < new_key.size(); i++)
		{
			string temp = new_key[i];
			if(!old_dic.count(temp)) out[0].push_back(temp);
			if(old_dic.count(temp) && old_dic[temp] != new_dic[temp]) out[2].push_back(temp);
		}
		for(int i = 0; i < old_key.size(); i++)
		{
			string temp2 = old_key[i];
			if(!new_dic.count(temp2)) out[1].push_back(temp2);
		}
		if(!out[0].size() && !out[1].size() && !out[2].size())
			printf("No changes\n");
		else
		{
			for(int i = 0; i < 3; i++)
			{
				if((int)out[i].size())
				{
					sort(out[i].begin(), out[i].end());
					cout<<pn[i]<<out[i][0];
					for(int k = 1; k < out[i].size(); k++)
						cout<<","<<out[i][k];
					printf("\n");;
				}
			}
		}
		printf("\n");;
	}
	return 0;
}