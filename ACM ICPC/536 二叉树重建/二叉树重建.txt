#include<iostream>
#include<algorithm>
#include<string>
using namespace std;
const int maxn = 100;
int lch[maxn], rch[maxn];
string pre_order, in_order;

int build(int L1, int R1, int L2, int R2)
{
	if(L1 > R1) return 0;
	int root = pre_order[L1] - 'A' + 1;
	int p = 0;
	for(int i = L2; i <= R2; i++)
	{
		if(pre_order[L1] == in_order[i])
			break;
		p++;
	}
	lch[root] = build(L1+1, L1+p, L2, L2+p-1);
	rch[root] = build(L1+p+1, R1, L2+p+1, R2);
	return root;
}

void solve(int root)
{
	if(lch[root]) solve(lch[root]);
	if(rch[root]) solve(rch[root]);
	char c = root + 'A' - 1;
	cout<<c;
}

int main()
{
	while(cin>>pre_order>>in_order)
	{
		int len = pre_order.length();
		build(0, len-1, 0, len-1);
		solve(pre_order[0] - 'A' + 1);
		cout<<endl;
	}
	return 0;
}




#include<iostream>
#include<string>
using namespace std;

string pre_order, in_order;
int j;

void solve(int begin, int end)
{
	int i;
	if(begin > end) return;
	for(i = 0; i < end; i++)
	{
		if(pre_order[j] == in_order[i])
			break;
	}
	j++;
	solve(begin, i-1);
	solve(i+1, end);
	cout<<in_order[i];
}

int main()
{
	int len;
	while(cin>>pre_order)
	{
		cin>>in_order;
		len = pre_order.length();
		solve(0, len-1);
		cout<<endl;
	}
	return 0;
}