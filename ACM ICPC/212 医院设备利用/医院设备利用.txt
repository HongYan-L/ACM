#include<bits/stdc++.h>
using namespace std;
int MAX = 0;

struct room_bed{
	int minutes;
	double used;
	room_bed(int x = 0, double y = 0) : minutes(x), used(y) {}
}Room[40], Bed[40];
struct patient{
	string name;
	int o_begin, o_end, r_begin, r_end, o_time, r_time, room, bed, id;
};
struct ROOM{
	int id, start, end;
	ROOM(int a = 0, int b = 0) : start(a), end(b) {}
};
struct cmp1{
	bool operator () (const ROOM a, const ROOM b) const{
		if(a.end != b.end) return a.end > b.end;
		return a.id > b.id;
	}
};
bool cmp2(const patient a, const patient b){
	if(a.o_end != b.o_end) return a.o_end < b.o_end;
	return a.room < b.room;
}
bool cmp3(const patient a, const patient b){
	return a.id < b.id;
}

vector<patient> patients;
priority_queue<ROOM, vector<ROOM>, cmp1> operatorroom;
vector<ROOM> bed;

int main()
{
	int n, m, T, t1, t2, t3, k;
	int i, j;
	while(cin>>n>>m>>T>>t1>>t2>>t3>>k)
	{
		MAX = 0;
		patients.clear();
		bed.clear();
		while(!operatorroom.empty()) operatorroom.pop();
		for(i = 0; i < 40; i++) {Room[i].minutes = 0, Bed[i].minutes = 0;}
		for(i = 0; i < k; i++)
		{
			patient p;
			cin>>p.name;
			cin>>p.o_time>>p.r_time;
			p.id = i;
			patients.push_back(p);
		}
		for(i = 0; i < n; i++)
		{
			ROOM r;
			r.id = i + 1, r.start = r.end = 0;
			operatorroom.push(r);
		}
		for(i = 0; i < k; i++)
		{
			ROOM x = operatorroom.top();
			operatorroom.pop();
			if(x.end == 0) x.start = T * 60;
			else x.start = x.end + t2;
			x.end = patients[i].o_time + x.start;
			Room[x.id].minutes += patients[i].o_time;
			patients[i].o_begin = x.start, patients[i].o_end = x.end, patients[i].room = x.id;
			operatorroom.push(x);
		}
		sort(patients.begin(), patients.end(), cmp2);
		for(i = 0; i < m; i++)
		{
			ROOM r;
			r.id = i + 1, r.start = r.end = 0;
			bed.push_back(r);
		}
		for(i = 0; i < k; i++)
		{
			for(j = 0; j < m; j++)
			{
				if(patients[i].o_end >= (bed[j].end == 0 ? bed[j].end : bed[j].end + t3))
				{
					patients[i].bed = j + 1;
					bed[j].start = patients[i].o_end + t1;
					bed[j].end = bed[j].start + patients[i].r_time;
					patients[i].r_begin = bed[j].start;
					patients[i].r_end = bed[j].end;
					Bed[j+1].minutes += patients[i].r_time;
					break;
				}
			}
		}
		for(i = 0; i < k; i++) MAX = max(MAX, patients[i].r_end - T*60);
		sort(patients.begin(), patients.end(), cmp3);
		puts(" Patient          Operating Room          Recovery Room");
     	puts(" #  Name     Room#  Begin   End      Bed#  Begin    End");
     	puts(" ------------------------------------------------------");
     	for(i = 0; i < k; i++)
         	printf("%2d  %-9s %2d  %3d:%02d  %3d:%02d    %3d  %3d:%02d  %3d:%02d\n",
         	i + 1, patients[i].name.c_str(), patients[i].room, patients[i].o_begin/60, 
         	patients[i].o_begin%60, patients[i].o_end/60, patients[i].o_end%60, patients[i].bed,
         	patients[i].r_begin/60, patients[i].r_begin%60, patients[i].r_end/60, patients[i].r_end%60);
     	printf("\n");
     	for(i = 0; i < m; i++)
     	{
        	if(MAX == 0) Bed[i+1].used = 0.00;
        	else Bed[i+1].used = (double)Bed[i+1].minutes * 100 / MAX;
     	}
     	for(i = 0; i < n; i++)
     	{
        	if(MAX == 0) Room[i+1].used = 0.00;
        	else Room[i+1].used = (double)Room[i+1].minutes * 100 / MAX;
     	}
     	puts("Facility Utilization");
     	puts("Type  # Minutes  % Used");
     	puts("-------------------------");
     	for(i = 0; i < n; i++) printf("Room %2d %7d %7.2lf\n", i + 1, Room[i+1].minutes, Room[i+1].used);
     	for(i = 0; i < m; i++) printf("Bed  %2d %7d %7.2lf\n", i + 1, Bed[i+1].minutes, Bed[i+1].used);
     	printf("\n");
	}
	return 0;
}